unit cep.model.viacep;

interface

uses
  cep.model.interfaces,
  FireDAC.Comp.Client,
  System.SysUtils;

type
  TModelViaCep = class(TInterfacedObject, iViaCep)
  private

  public
     constructor create;
     destructor destroy; override;
     class function New: iViaCep;
     function fnc_ViaCep(Value: String; aDataSet: TFDMemTable): String;

  end;

implementation

uses
   RESTRequest4D,
   DataSet.Serialize.Adapter.RESTRequest4D;

{ TModelPessoa }

constructor TModelViaCep.create;
begin

end;

destructor TModelViaCep.destroy;
begin

  inherited;
end;

class function TModelViaCep.New: iViaCep;
begin
   Result := Self.Create;
end;

function TModelViaCep.fnc_ViaCep(Value: String; aDataSet: TFDMemTable): String;
var
   Resp : IResponse;
begin
   Resp := TRequest.New.BaseURL('viacep.com.br/ws')
              .Resource(Value) + '/json')
              .Accept('application/json')
              .Adapters(TDataSetSerializeAdapter.New(aDataSet))
              .Get;
    if Resp.StatusCode = 200 then
    begin
        if Resp.Content.IndexOf('erro') > 0 then
            ShowMessage('CEP não encontrado')
        else
        begin
            with MemTable do
            begin
                lblEndereco.Text := 'CEP: ' +FieldByName('cep').AsString + sLineBreak+
                                'End: ' + FieldByName('logradouro').AsString + sLineBreak +
                                    'Compl: ' + FieldByName('complemento').AsString + sLineBreak +
                                    'Bairro: ' + FieldByName('bairro').AsString + sLineBreak +
                                    'Cidade: ' + FieldByName('localidade').AsString + sLineBreak +
                                    'UF: ' + FieldByName('uf').AsString + sLineBreak +
                                    'Cod. IBGE: ' + FieldByName('ibge').AsString;


            end;
        end;
    end
    else
        ShowMessage('Erro ao consultar CEP');


end;

end.
